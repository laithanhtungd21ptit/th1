const ctx = document.getElementById('iotChart').getContext('2d');

let iotChart;

// H√†m l·∫•y d·ªØ li·ªáu t·ª´ MySQL th√¥ng qua API
function formatDateTime(isoString) {
    const date = new Date(isoString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

async function fetchSensorData() {
    try {
        const response = await fetch("http://localhost:5000/api/data");
        const data = await response.json();

        if (data.length === 0) {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ MySQL");
            return;
        }

        // Chuy·ªÉn ƒë·ªïi th·ªùi gian sang ƒë·ªãnh d·∫°ng mong mu·ªën
        const hours = data.map(item => formatDateTime(item.time));  
        const temperatureData = data.map(item => item.temp);
        const humidityData = data.map(item => item.humidity);
        const lightData = data.map(item => item.light);

        updateChart(hours, temperatureData, humidityData, lightData);
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ MySQL:", error);
    }
}


// H√†m c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
function updateChart(hours, temperatureData, humidityData, lightData) {
    const chartData = {
        labels: hours,
        datasets: [
            {
                label: 'Nhi·ªát ƒë·ªô (¬∞C)',
                data: temperatureData,
                borderColor: 'red',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                fill: true
            },
            {
                label: 'ƒê·ªô ·∫©m (%)',
                data: humidityData,
                borderColor: 'blue',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                fill: true
            },
            {
                label: '√Ånh s√°ng (lux)',
                data: lightData,
                borderColor: 'yellow',
                backgroundColor: 'rgba(255, 206, 86, 0.2)',
                fill: true
            }
        ]
    };

    if (iotChart) {
        iotChart.data = chartData;
        iotChart.update();
    } else {
        iotChart = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                plugins: { legend: { position: 'top' } }
            }
        });
    }
}


// üü¢ H√†m l·∫•y d·ªØ li·ªáu l·ªõn nh·∫•t trong ng√†y t·ª´ API v√† c·∫≠p nh·∫≠t giao di·ªán
async function fetchMaxValues() {
    try {
        const response = await fetch("http://localhost:5000/api/max-values"); // API m·ªõi tr·∫£ v·ªÅ c·∫£ 3 gi√° tr·ªã
        const data = await response.json();

        console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data); // Debug API response

        if (data.max_temp !== null) {
            document.getElementById("tempCard").innerHTML = `${data.max_temp}<span class="text-xl ml-1">¬∞C</span>`;
        }

        if (data.max_humidity !== null) {
            document.getElementById("humidityCard").innerHTML = `${data.max_humidity}<span class="text-xl ml-1">%</span>`;
        }

        if (data.max_light !== null) {
            document.getElementById("lightCard").innerHTML = `${data.max_light}<span class="text-xl ml-1">lux</span>`;
        }
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
    }
}

// üü¢ G·ªçi API khi trang t·∫£i
document.addEventListener("DOMContentLoaded", fetchMaxValues);


// üü¢ H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã (ƒë√®n, qu·∫°t, ƒëi·ªÅu h√≤a)
async function updateDeviceStatus(device, action) {
    const actionText = action ? "B·∫≠t" : "T·∫Øt"; // Chuy·ªÉn ƒë·ªïi 1 -> "B·∫≠t", 0 -> "T·∫Øt"

    try {
        const response = await fetch("http://localhost:5000/api/update-device", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ device, action: actionText }) // G·ª≠i "B·∫≠t" ho·∫∑c "T·∫Øt"
        });

        const result = await response.json();
        console.log(result.message);
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã:", error);
    }
}


// üü¢ X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng b·∫≠t/t·∫Øt thi·∫øt b·ªã
document.getElementById("lightSwitch").addEventListener("change", function () {
    updateDeviceStatus("ƒê√®n", this.checked ? 1 : 0);
});

document.getElementById("fanSwitch").addEventListener("change", function () {
    updateDeviceStatus("Qu·∫°t", this.checked ? 1 : 0);
});

document.getElementById("acSwitch").addEventListener("change", function () {
    updateDeviceStatus("ƒêi·ªÅu h√≤a", this.checked ? 1 : 0);
});

// üü¢ T·∫£i d·ªØ li·ªáu khi trang m·ªü
fetchSensorData();
// fetchMaxLight();

// üü¢ C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói 10 gi√¢y
setInterval(fetchSensorData, 10000);
// setInterval(fetchMaxLight, 30000);
